managed implementation in class zbp_order_master unique;
strict ( 2 );

define behavior for ZI_ORDER_YS alias Order
persistent table zorder_master
lock master
authorization master ( instance )
etag master LocalLastChanged
{
  create;
  update;
  delete;

  field ( readonly ) OrderUUID, OrderID, CreationDate, CancellationDate, CompletionDate, TotalPrice;
  field ( numbering:managed ) OrderUUID;
  field ( readonly : update ) CreatedBy, CreatedAt, LastChangedBy, LastChangedAt, LocalLastChanged;
  field ( mandatory ) Name, Customer, DeliveryCountry;

  association _Items { create; }

  // Actions
  action ( features : instance ) cancelOrder result [1] $self;
  action ( features : instance ) completeOrder result [1] $self;

  // Determinations
  determination setInitialStatus on modify { create; }
  determination setOrderID on save { create; }
  determination setCreationDate on save { create; }

  // Validations
  validation validateItemsExist on save { create; update; }

  // Mapping
  mapping for zorder_master
  {
    OrderUUID = order_uuid;
    OrderID = order_id;
    Name = name;
    Status = status;
    Customer = customer_id;
    CreationDate = creation_date;
    CancellationDate = cancellation_date;
    CompletionDate = completion_date;
    DeliveryCountry = delivery_country;
    TotalPrice = total_price;
    CurrencyCode = currency_code;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
    LocalLastChanged = local_last_changed_at;
  }
}

define behavior for ZI_ITEMS_YS alias Item
persistent table zorder_items
lock dependent by _Order
authorization dependent by _Order
etag master LocalLastChanged
{
  update;
  delete;

  field ( readonly ) ItemUUID, OrderUUID;
  field ( numbering:managed ) ItemUUID;
  field ( readonly : update ) CreatedBy, CreatedAt, LastChangedBy, LastChangedAt, LocalLastChanged;
  field ( mandatory ) Name, Price, Quantity;

  association _Order;

  // Determinations
  determination calculateItemTotal on modify { field Price, Quantity; }

  // Mapping
  mapping for zorder_items
  {
    ItemUUID = item_uuid;
    OrderUUID = order_uuid;
    Name = name;
    Price = price;
    CurrencyCode = currency_code;
    Quantity = quantity;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
    LocalLastChanged = local_last_changed_at;
  }
}